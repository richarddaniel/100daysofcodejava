/*
Didn't get to finish this one... will come back to it tomorrow.

Java: Maximum Product Subarray

Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product. It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

Example:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product of 6.

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
*/

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the number of elements in the array:");
        int n = scanner.nextInt();
        int[] input = new int[n];
        System.out.println("Enter the elements in the array:");
        for (int i : input){
            input[i] = scanner.nextInt();
        }
        System.out.print("Max product of any two adjacent elements is: " + maxProduct(input));
    }

    public static int maxProduct(int[] input){
        int max = 0;
        int maxTemporary = 0;
        int comparison = 0;

        for (int i = 1; i < input.length; i++){
            maxTemporary = Math.max(input[i], (Math.max(input[i], input[comparison])));
            max = Math.max(max, maxTemporary);
            comparison = i;
        }
        return max;
    }
}
